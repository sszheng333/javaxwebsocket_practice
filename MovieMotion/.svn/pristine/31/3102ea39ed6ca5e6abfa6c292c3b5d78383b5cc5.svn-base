package com.comicyu.utils;

import java.security.interfaces.RSAPrivateKey;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.json.JSONObject;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;


/**
 * Redis 工具类
 * 
 */
public class RedisUtil {
	static Logger logger = Logger.getLogger(RedisUtil.class.getName());
	//Redis服务器IP
		private static String ADDR_ARRAY = "10.69.10.121";
	//  private static String ADDR_ARRAY = "172.17.78.197";
    
    //Redis的端口号
    private static int PORT = 6379;
    
    //访问密码
     private static String AUTH = "himaker@2015";
  //  private static String AUTH = "r^fhe2aZ3Kqf&BFS5*na";
    
    
    //可用连接实例的最大数目，默认值为8；
    //如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
    private static int MAX_ACTIVE = 1024;
    
    //控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。
    private static int MAX_IDLE = 200;
    
    //等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；
    private static int MAX_WAIT = 10000;

    //超时时间
    private static int TIMEOUT = 10000; 
    
    //在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；
    private static boolean TEST_ON_BORROW = true;
    
    //redis过期时间,以秒为单位
    public final static int EXRP_HOUR = 60*60;			//一小时
    public final static int EXRP_DAY = 60*60*24;		//一天
    public final static int EXRP_MONTH = 60*60*24*30;	//一个月
    
    private static JedisPool jedisPool = null;
    
     /**
      * 初始化Redis连接池
      */
/*    
     static {
         try {
             JedisPoolConfig config = new JedisPoolConfig();
             config.setMaxTotal(MAX_ACTIVE);
             config.setMaxIdle(MAX_IDLE);
             config.setMaxWaitMillis(MAX_WAIT);
             config.setTestOnBorrow(TEST_ON_BORROW);
             jedisPool = new JedisPool(config, ADDR_ARRAY, PORT, TIMEOUT, AUTH);
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
*/    

    private static void initialPool(){
        try {
            JedisPoolConfig config = new JedisPoolConfig();
             config.setMaxTotal(MAX_ACTIVE);
             config.setMaxIdle(MAX_IDLE);
             config.setMaxWaitMillis(MAX_WAIT);
             config.setTestOnBorrow(TEST_ON_BORROW);
            jedisPool = new JedisPool(config, ADDR_ARRAY.split(",")[0], PORT, TIMEOUT, AUTH);
        } catch (Exception e) {
        	logger.error("First create JedisPool error : "+e.getMessage());
//            try{
//	            //如果第一个IP异常，则访问第二个IP
//	            JedisPoolConfig config = new JedisPoolConfig();
//	             config.setMaxTotal(MAX_ACTIVE);
//	             config.setMaxIdle(MAX_IDLE);
//	             config.setMaxWaitMillis(MAX_WAIT);
//	             config.setTestOnBorrow(TEST_ON_BORROW);
//	            jedisPool = new JedisPool(config, ADDR_ARRAY.split(",")[1], PORT, TIMEOUT, AUTH);
//            }catch(Exception e2){
//            	logger.error("Second create JedisPool error : "+e2.getMessage());
//            }
        }
    }

    /**
     * 在多线程环境同步初始化
     */
    private static synchronized void poolInit() {
    	if (jedisPool == null) {  
            initialPool();
        }
    }

    
    /**
     * 同步获取Jedis实例
     * @return Jedis
     */
    public synchronized static Jedis getJedis() {
        if (jedisPool == null) {  
        	poolInit();
        }
        Jedis jedis = null;
        try {  
        	//System.out.println(jedisPool.isClosed());
            if (jedisPool != null) {
            	//logger.info("First create JedisPool success ");
            	jedis = jedisPool.getResource(); 
            }
        } catch (Exception e) {  
        	e.printStackTrace();
        	logger.error(e.getMessage());
        	returnBrokenResource(jedis);
        }finally{
        	returnResource(jedis);
        }
        return jedis;
    }  
    
    
    /**
     * 释放jedis资源
     * @param jedis
     */
    public synchronized static void returnResource(final Jedis jedis) {
        if (jedis != null && jedisPool !=null) {
        	jedisPool.returnResource(jedis);
        	//logger.info("JedisPool returnResource success ");
        }
    }
    
    /** 
     * Jedis对象出异常的时候，回收Jedis对象资源 
     *  
     * @param jedis 
     */  
    public synchronized static void returnBrokenResource(Jedis jedis) {  
        if (jedis != null) {  
            jedisPool.returnBrokenResource(jedis);
            //logger.info("JedisPool returnBrokenResource success ");
        }  
    }      
	
	/**
	 * 设置 String
	 * @param key
	 * @param value
	 */
	public static void setString(String key ,String jsonData){
    	try {
    		if(getString(key)!=null){
    			//RSAPrivateKey priKey = (RSAPrivateKey) getString(key);
    			JSONObject jsonOldObj = new JSONObject(getString(key));
    			JSONObject jsonNewObj = new JSONObject(jsonData);
    			jsonNewObj.put("Popularity", Integer.parseInt(jsonOldObj.get("Popularity").toString())+Integer.parseInt(jsonNewObj.get("Popularity").toString()));
    			jsonData = jsonNewObj.toString(); 
    		}
    		jsonData = StringUtils.isEmpty(jsonData) ? "" : jsonData;
    		getJedis().set(key,jsonData);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 设置 过期时间
	 * @param key
	 * @param seconds 以秒为单位
	 * @param value
	 */
	public static void setString(String key ,int seconds,String value){
    	try {
    		value = StringUtils.isEmpty(value) ? "" : value;
    		getJedis().setex(key, seconds, value);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 获取String值
	 * @param key
	 * @return value
	 */
	public static String getString(String key){
		if(getJedis() == null || !getJedis().exists(key)){
			return null;
		}
		return getJedis().get(key);
	}
	
}